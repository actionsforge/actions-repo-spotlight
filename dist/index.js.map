{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["#!/usr/bin/env node\n\nimport * as core from '@actions/core';\nimport * as github from '@actions/github';\nimport { Octokit } from '@octokit/rest';\nimport { pathToFileURL } from 'url';\n\n/**\n * Default configuration values\n */\nconst DEFAULTS = {\n  delay: 300,\n  limit: 6,\n  minViews: 0,\n  includeForks: false,\n  includeArchived: false\n} as const;\n\n/**\n * Interface for spotlight options\n */\ninterface SpotlightOptions {\n  delay?: number;\n  limit?: number;\n  minViews?: number;\n  includeForks?: boolean;\n  includeArchived?: boolean;\n}\n\n/**\n * Sleep function to add delays between API calls\n */\nfunction sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Main spotlight functionality\n */\nexport async function spotlightRepos(\n  octokit: Octokit,\n  username: string,\n  {\n    delay = 300,\n    limit = 6,\n    minViews = 0,\n    includeForks = false,\n    includeArchived = false\n  }: SpotlightOptions = {}\n): Promise<{ name: string; views: number }[]> {\n  core.info(`üîç Fetching repositories for ${username || 'authenticated user'}...`);\n  core.info(`‚è±Ô∏è Delay between traffic API calls: ${delay}ms`);\n  core.info(`üî¢ Limit: ${limit}`);\n  core.info(`üìâ Minimum views: ${minViews}`);\n  core.info(`üç¥ Include forks: ${includeForks}`);\n  core.info(`üì¶ Include archived: ${includeArchived}`);\n\n  const repos = await octokit.paginate(octokit.rest.repos.listForAuthenticatedUser, {\n    visibility: 'all',\n    affiliation: 'owner',\n    per_page: 100\n  });\n\n  const trafficData: { name: string; views: number }[] = [];\n\n  for (let i = 0; i < repos.length; i++) {\n    const repo = repos[i];\n    if (!includeArchived && repo.archived) continue;\n    if (!includeForks && repo.fork) continue;\n\n    if (i > 0 && i % 25 === 0) {\n      const autoDelay = Math.floor(Math.random() * 50 + delay * 0.5);\n      core.info(`‚è∏Ô∏è Auto delay (${autoDelay}ms) [repo ${i}/${repos.length}]`);\n      await sleep(autoDelay);\n    } else {\n      await sleep(delay);\n    }\n\n    try {\n      const { data } = await octokit.rest.repos.getViews({\n        owner: repo.owner.login,\n        repo: repo.name\n      });\n\n      if (data.count >= minViews) {\n        trafficData.push({\n          name: repo.full_name,\n          views: data.count\n        });\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      core.warning(`‚ö†Ô∏è Skipped ${repo.full_name}: API Error - ${message}`);\n    }\n  }\n\n  if (trafficData.length === 0) {\n    core.warning('‚ö†Ô∏è No repositories met the view criteria.');\n    return [];\n  }\n\n  trafficData.sort((a, b) => b.views - a.views);\n  const top = trafficData.slice(0, limit);\n\n  core.info(\n    `üìä Top ${top.length} repositories by views:\\n${top.map(\n      (r, i) => `${i + 1}. ${r.name} ‚Äî ${r.views} views`\n    ).join('\\n')}`\n  );\n\n  return top;\n}\n\n/**\n * Checks if the script is being executed directly\n * @returns true if the script is being executed directly\n */\nexport function isDirectExecution(): boolean {\n  return import.meta.url === pathToFileURL(process.argv[1])?.href;\n}\n\n/**\n * Gets the GitHub token from environment variables or input\n * @returns GitHub token\n * @throws {Error} When token is not found\n */\nexport function getToken(): string {\n  const token =\n    process.env.GH_SPOTLIGHT_TOKEN ||\n    process.env.GITHUB_TOKEN ||\n    core.getInput?.('token') ||\n    getArg('--token');\n\n  if (!token) {\n    throw new Error('GitHub token is required. Set GH_SPOTLIGHT_TOKEN or use --token');\n  }\n\n  return token;\n}\n\n/**\n * Gets the username from context or environment\n * @returns GitHub username\n */\nexport function getUsername(): string {\n  let username = github.context?.actor || process.env.GITHUB_USER;\n\n  if (!username) {\n    core.warning('‚ö†Ô∏è GitHub username not found. Using \"authenticated user\" as fallback.');\n    username = 'authenticated user';\n  }\n\n  return username;\n}\n\n/**\n * Gets all options from environment variables or command line arguments\n * @returns Object containing all options\n */\nexport function getOptions() {\n  return {\n    delay: getInputOrArg('delay', DEFAULTS.delay),\n    limit: getInputOrArg('limit', DEFAULTS.limit),\n    minViews: getInputOrArg('min_views', DEFAULTS.minViews),\n    includeForks: getBoolInputOrFlag('include_forks', '--include-forks'),\n    includeArchived: getBoolInputOrFlag('include_archived', '--include-archived')\n  };\n}\n\n/**\n * Gets a command line argument value\n * @param flag - The flag to look for\n * @returns The value of the flag or undefined\n */\nexport function getArg(flag: string): string | undefined {\n  const index = process.argv.indexOf(flag);\n  return index !== -1 ? process.argv[index + 1] : undefined;\n}\n\n/**\n * Gets a value from either GitHub Action input or command line argument\n * @param name - Name of the parameter\n * @param fallback - Default value if not found\n * @returns The parsed number value\n * @throws {Error} When the value cannot be parsed as a number\n */\nexport function getInputOrArg(name: string, fallback: number): number {\n  const input = core.getInput?.(name);\n  if (input) {\n    const parsed = parseInt(input, 10);\n    if (isNaN(parsed)) {\n      throw new Error(`Invalid number for ${name}: ${input}`);\n    }\n    return parsed;\n  }\n\n  const flagIndex = process.argv.indexOf(`--${name.replace(/_/g, '-')}`);\n  if (flagIndex !== -1) {\n    const value = process.argv[flagIndex + 1];\n    const parsed = parseInt(value, 10);\n    if (isNaN(parsed)) {\n      throw new Error(`Invalid number for ${name}: ${value}`);\n    }\n    return parsed;\n  }\n\n  return fallback;\n}\n\n/**\n * Gets a boolean value from either GitHub Action input or command line flag\n * @param name - Name of the parameter\n * @param flag - Command line flag\n * @returns The boolean value\n */\nexport function getBoolInputOrFlag(name: string, flag: string): boolean {\n  const input = core.getInput?.(name)?.toLowerCase();\n  if (input === 'true') return true;\n  if (input === 'false') return false;\n  return process.argv.includes(flag);\n}\n\n/**\n * Handles errors and exits the process\n * @param error - The error to handle\n */\nexport function handleError(error: unknown): never {\n  const message = error instanceof Error ? error.message : String(error);\n  core.setFailed(message);\n  process.exit(1);\n}\n\n/**\n * Main entry point for the CLI and GitHub Action\n * @throws {Error} When required parameters are missing or invalid\n */\nexport async function main(): Promise<void> {\n  if (process.argv.includes('--help')) {\n    console.log(`\\nUsage: node index.js [options]\\n\nOptions:\n  --token <token>         GitHub token (required)\n  --limit <N>             Max repositories to show (default: ${DEFAULTS.limit})\n  --delay <ms>            Delay between API calls (default: ${DEFAULTS.delay})\n  --min-views <N>         Skip repos with fewer views (default: ${DEFAULTS.minViews})\n  --include-forks         Include forked repositories\n  --include-archived      Include archived repositories\n  --help                  Show this help message\n`);\n    process.exit(0);\n  }\n\n  const startTime = Date.now();\n\n  try {\n    const token = getToken();\n    const options = getOptions();\n\n    const octokit = new Octokit({ auth: token });\n    const username = getUsername();\n\n    await spotlightRepos(octokit, username, {\n      delay: options.delay,\n      limit: options.limit,\n      minViews: options.minViews,\n      includeForks: options.includeForks,\n      includeArchived: options.includeArchived\n    });\n\n    const elapsed = ((Date.now() - startTime) / 1000).toFixed(2);\n    core.info(`‚úÖ Completed in ${elapsed}s`);\n  } catch (error) {\n    handleError(error);\n  }\n}\n\n// Run main if this is being executed directly\nif (isDirectExecution()) {\n  main().catch(handleError);\n}\n"]}